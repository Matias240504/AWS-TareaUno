# complete-infrastructure-template.yml - Full AWS Infrastructure
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infraestructura completa con EC2, RDS, VPC, ECS, Load Balancer, Lambda y DynamoDB'

Parameters:
  ProjectName:
    Type: String
    Default: aws-demo-project
    Description: Nombre del proyecto para etiquetado de recursos
    
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues: [t3.micro, t3.small, t3.medium]
    Description: Tipo de instancia EC2
    
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    AllowedValues: [db.t3.micro, db.t3.small, db.t3.medium]
    Description: Clase de instancia RDS
    
  DBUsername:
    Type: String
    Default: admin
    Description: Usuario maestro de la base de datos
    
  DBPassword:
    Type: String
    Default: MySecurePassword123!
    NoEcho: true
    MinLength: 8
    Description: Contraseña de la base de datos (mínimo 8 caracteres)
    
  KeyPairName:
    Type: String
    Default: my-key-pair
    Description: Nombre del Key Pair para acceso EC2

Resources:
  # ==================== VPC y NETWORKING ====================
  
  # VPC Principal
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-VPC"
        - Key: Project
          Value: !Ref ProjectName

  # Subredes Públicas (para Load Balancer y NAT Gateway)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicSubnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicSubnet2"

  # Subredes Privadas (para EC2 y RDS)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateSubnet1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateSubnet2"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-IGW"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateway para subredes privadas
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-NAT"

  # Tablas de Rutas
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicRT"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateRT"

  # Rutas
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Asociaciones de Subredes
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # ==================== SECURITY GROUPS ====================

  # Security Group para Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-ALB-SG"

  # Security Group para EC2
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-EC2-SG"

  # Security Group para RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-RDS-SG"

  # ==================== RDS DATABASE ====================

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-db-subnet-group"

  # RDS MySQL Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${ProjectName}-mysql-db"
      DBInstanceClass: !Ref DBInstanceClass
      Engine: mysql
      EngineVersion: '8.0.35'
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-mysql-db"

  # ==================== DYNAMODB ====================

  # DynamoDB Table (mantener para Lambda)
  VisitCounterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-visit-counter"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-dynamodb"

  # ==================== LAMBDA ====================

  # IAM Role para Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt VisitCounterTable.Arn

  # Lambda Function
  VisitCounterLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-visit-counter-lambda"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          
          exports.handler = async (event) => {
              const tableName = process.env.DYNAMODB_TABLE_NAME;
              const counterId = 'visit-counter';
              
              try {
                  if (event.action === 'get') {
                      const result = await dynamodb.get({
                          TableName: tableName,
                          Key: { id: counterId }
                      }).promise();
                      
                      const count = result.Item ? result.Item.count : 0;
                      return {
                          statusCode: 200,
                          body: JSON.stringify({
                              success: true,
                              data: { count, totalVisits: count, lastUpdated: new Date().toISOString() }
                          })
                      };
                  }
                  
                  if (event.action === 'increment') {
                      const result = await dynamodb.update({
                          TableName: tableName,
                          Key: { id: counterId },
                          UpdateExpression: 'ADD #count :inc SET lastUpdated = :timestamp',
                          ExpressionAttributeNames: { '#count': 'count' },
                          ExpressionAttributeValues: { 
                              ':inc': 1, 
                              ':timestamp': new Date().toISOString() 
                          },
                          ReturnValues: 'ALL_NEW'
                      }).promise();
                      
                      return {
                          statusCode: 200,
                          body: JSON.stringify({
                              success: true,
                              data: { 
                                  count: result.Attributes.count, 
                                  totalVisits: result.Attributes.count,
                                  lastUpdated: result.Attributes.lastUpdated 
                              }
                          })
                      };
                  }
                  
                  return {
                      statusCode: 400,
                      body: JSON.stringify({ error: 'Invalid action' })
                  };
                  
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message })
                  };
              }
          };
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref VisitCounterTable
      Timeout: 30
      MemorySize: 128

  # ==================== S3 ====================

  # S3 Bucket para assets estáticos
  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-assets-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-s3-assets"

  # S3 Bucket Policy
  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${StaticAssetsBucket}/*"

  # ==================== EC2 INSTANCES ====================

  # IAM Role para EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ec2-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "${StaticAssetsBucket}/*"
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt VisitCounterLambda.Arn

  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ProjectName}-launch-template"
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y nodejs npm git docker
            service docker start
            usermod -a -G docker ec2-user
            
            # Install CloudWatch agent
            yum install -y amazon-cloudwatch-agent
            
            # Clone and setup application
            cd /home/ec2-user
            git clone https://github.com/your-repo/aws-demo-app.git || echo "Repository not found, creating basic app"
            
            # Create basic Node.js app
            mkdir -p /home/ec2-user/app
            cd /home/ec2-user/app
            
            cat > package.json << 'EOF'
            {
              "name": "aws-demo-app",
              "version": "1.0.0",
              "description": "AWS Demo Application",
              "main": "server.js",
              "scripts": {
                "start": "node server.js"
              },
              "dependencies": {
                "express": "^4.18.2",
                "mysql2": "^3.6.0",
                "aws-sdk": "^2.1467.0"
              }
            }
            EOF
            
            cat > server.js << 'EOF'
            const express = require('express');
            const mysql = require('mysql2/promise');
            const AWS = require('aws-sdk');
            
            const app = express();
            const port = 3000;
            
            // Database configuration
            const dbConfig = {
              host: '${RDSInstance.Endpoint.Address}',
              user: '${DBUsername}',
              password: '${DBPassword}',
              database: 'demo_db'
            };
            
            app.use(express.json());
            app.use(express.static('public'));
            
            // Health check
            app.get('/health', (req, res) => {
              res.json({ status: 'healthy', timestamp: new Date().toISOString() });
            });
            
            // Database test
            app.get('/db-test', async (req, res) => {
              try {
                const connection = await mysql.createConnection(dbConfig);
                const [rows] = await connection.execute('SELECT 1 as test');
                await connection.end();
                res.json({ database: 'connected', result: rows });
              } catch (error) {
                res.status(500).json({ error: error.message });
              }
            });
            
            app.listen(port, '0.0.0.0', () => {
              console.log(`Server running on port ${port}`);
            });
            EOF
            
            npm install
            
            # Start application
            npm start > /var/log/app.log 2>&1 &
            
            # Signal CloudFormation
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${ProjectName}-asg"
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-asg-instance"
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 2
        Timeout: PT15M

  # ==================== LOAD BALANCER ====================

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-alb"
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-alb"

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-tg"
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref MainVPC
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-tg"

  # Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ==================== CLOUDWATCH ====================

  # CloudWatch Log Group
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ec2/${ProjectName}"
      RetentionInDays: 14

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${ProjectName}-monitoring"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}" ],
                  [ ".", "TargetResponseTime", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Load Balancer Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${RDSInstance}" ],
                  [ ".", "DatabaseConnections", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "RDS Metrics"
              }
            }
          ]
        }

Outputs:
  # VPC Information
  VPCId:
    Description: ID de la VPC
    Value: !Ref MainVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC-ID"

  # Load Balancer
  LoadBalancerDNS:
    Description: DNS del Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ALB-DNS"

  LoadBalancerURL:
    Description: URL completa de la aplicación
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"

  # Database
  RDSEndpoint:
    Description: Endpoint de la base de datos RDS
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-RDS-Endpoint"

  # Lambda
  LambdaFunctionName:
    Description: Nombre de la función Lambda
    Value: !Ref VisitCounterLambda
    Export:
      Name: !Sub "${AWS::StackName}-Lambda-Name"

  # S3
  S3BucketName:
    Description: Nombre del bucket S3
    Value: !Ref StaticAssetsBucket
    Export:
      Name: !Sub "${AWS::StackName}-S3-Bucket"

  S3WebsiteURL:
    Description: URL del sitio web estático
    Value: !GetAtt StaticAssetsBucket.WebsiteURL

  # DynamoDB
  DynamoDBTableName:
    Description: Nombre de la tabla DynamoDB
    Value: !Ref VisitCounterTable
    Export:
      Name: !Sub "${AWS::StackName}-DynamoDB-Table"

  # Monitoring
  CloudWatchDashboard:
    Description: URL del dashboard de CloudWatch
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-monitoring"

  # Cost Estimation
  EstimatedMonthlyCost:
    Description: Costo mensual estimado (USD)
    Value: "~$50-80 (EC2: $15, RDS: $15, ALB: $20, NAT: $15, otros: $10-25)"
